import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import compression from 'compression';
import dotenv from 'dotenv';
import rateLimit from 'express-rate-limit';

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// Security middleware
app.use(helmet());

// CORS configuration
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:19006'],
  credentials: true,
}));

// Compression middleware
app.use(compression());

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging middleware
app.use(morgan('combined'));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: {
    error: 'Too many requests from this IP, please try again later.',
  },
});
app.use(limiter);

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Server is running',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
  });
});

// Mock API endpoints for development
app.get('/api/auth/profile', (req, res) => {
  res.json({
    success: true,
    data: {
      user: {
        _id: 'mock-user-id',
        email: 'test@example.com',
        role: 'student',
        createdAt: new Date().toISOString(),
        studyPreferences: {
          subjects: ['Mathematics', 'Physics'],
          difficulty: 'intermediate'
        }
      }
    }
  });
});

app.post('/api/auth/login', (req, res) => {
  res.json({
    success: true,
    message: 'Login successful (mock)',
    data: {
      user: {
        _id: 'mock-user-id',
        email: req.body.email || 'test@example.com',
        role: 'student'
      },
      token: 'mock-jwt-token'
    }
  });
});

app.post('/api/auth/signup', (req, res) => {
  res.json({
    success: true,
    message: 'User created successfully (mock)',
    data: {
      user: {
        _id: 'mock-user-id',
        email: req.body.email || 'test@example.com',
        role: 'student'
      },
      token: 'mock-jwt-token'
    }
  });
});

app.get('/api/questions/trending', (req, res) => {
  res.json({
    success: true,
    data: {
      questions: [
        {
          _id: 'mock-question-1',
          subject: 'Mathematics',
          questionText: 'How do I solve quadratic equations?',
          aiAnswer: 'To solve quadratic equations, you can use the quadratic formula...',
          upvotes: 15,
          trendingScore: 8.5,
          createdAt: new Date().toISOString()
        },
        {
          _id: 'mock-question-2',
          subject: 'Physics',
          questionText: 'What is Newton\'s second law?',
          aiAnswer: 'Newton\'s second law states that F = ma...',
          upvotes: 23,
          trendingScore: 9.2,
          createdAt: new Date().toISOString()
        }
      ]
    }
  });
});

app.post('/api/questions', (req, res) => {
  res.json({
    success: true,
    message: 'Question submitted successfully (mock)',
    data: {
      question: {
        _id: 'mock-question-new',
        subject: req.body.subject || 'Mathematics',
        questionText: req.body.questionText || 'Sample question',
        aiAnswer: 'This is a mock AI response. In production, this would be generated by OpenAI.',
        upvotes: 0,
        trendingScore: 0,
        createdAt: new Date().toISOString()
      }
    }
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found',
    path: req.originalUrl,
  });
});

// Global error handler
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Unhandled error:', err);
  
  res.status(err.status || 500).json({
    success: false,
    message: process.env.NODE_ENV === 'production' 
      ? 'Internal server error' 
      : err.message,
    ...(process.env.NODE_ENV !== 'production' && { stack: err.stack }),
  });
});

// Start server
const startServer = async () => {
  try {
    console.log(`🚀 Homework Helper AI Server starting...`);
    console.log(`📡 Port: ${PORT}`);
    console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
    
    app.listen(PORT, () => {
      console.log(`✅ Server running successfully!`);
      console.log(`🌐 Health check: http://localhost:${PORT}/health`);
      console.log(`📚 API endpoints available:`);
      console.log(`   - GET  /api/questions/trending`);
      console.log(`   - POST /api/questions`);
      console.log(`   - POST /api/auth/login`);
      console.log(`   - POST /api/auth/signup`);
      console.log(`   - GET  /api/auth/profile`);
      console.log(``);
      console.log(`🎯 This is a MOCK server for development.`);
      console.log(`🔧 To use the full server, fix the TypeScript issues first.`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

// Handle unhandled promise rejections
process.on('unhandledRejection', (err: any) => {
  console.error('Unhandled Promise Rejection:', err);
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (err: any) => {
  console.error('Uncaught Exception:', err);
  process.exit(1);
});

// Start the server
startServer();

export default app;
